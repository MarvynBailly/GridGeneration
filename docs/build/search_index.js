var documenterSearchIndex = {"docs":
[{"location":"pages/NumericalMethods/FirstOrderSystem.html#Numerical-Methods-First-Order-System","page":"First Order System","title":"Numerical Methods - First Order System","text":"","category":"section"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"We wish to solve the ODE","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"boxed8 sigma^4  M^2 x_s^2 x_ss  + 4 sigma^4  M M_x x_s^4 + 4sigma^2 m^2 M x_ss + 2 sigma^2 m M_x x_s^2  = 0","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"We aim to solve the system of first order nonlinear boundary value odes. Let's use DifferentialEquations.jl to try and solve the ODE with low effort.","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html#Formulation","page":"First Order System","title":"Formulation","text":"","category":"section"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"Let u_1 = x and u_2 = x_s to find","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"begincases \nu_1 = u_2 = x\nu_2 = x = - frac12 fracM_xM x_s^2\nendcases","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"with dirichlet boundary conditions:","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"u_1(1) = x_1 u_1(0) = x_0","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"Mathematical work shown here.","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html#Numerical-Solver","page":"First Order System","title":"Numerical Solver","text":"","category":"section"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"We can set up the problem like this","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"# Spacing ODE\nfunction SpacingODE!(du, u, p, s)\n    M_u1_func, M_func, sigma, _, _ = p\n    u1, u2 = u\n\n    M_u1 = M_u1_func(u1)\n    M = M_func(u1)\n\n    du[1] = u2\n    du[2] = - (M_u1 * u2^2) / (2 * M)    \nend\n\n\n# Set the boundary conditions\nfunction BoundaryConditions!(residual, u, p, s)\n    _, _, _, x0, x1 = p\n    residual[1] = u[1][1] - x0\n    residual[2] = u[end][1] - x1\nend","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"Now as the user we can define the metric function and derivative (analytically for now) and solve the spacing","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"using GridGeneration\n\n# define metric and derivative\nscale = 8000\nM(x) = scale * (1 + 15 * (x))^(-2)\nM_u1(x) = -2 * scale * (1 + 15 * (x))^(-3) * (15)\n\n# boundary values\nx0 = 0.0\nx1 = 1.0\n\n# define number of grid points\nN = 100\n\n# pass to the numerical solver\nsol = GridGeneration.SolveODE(M, M_u1, N, x0, x1);","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html#Results","page":"First Order System","title":"Results","text":"","category":"section"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"Let's compare the distribution of points for four different metrics","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"Uniform: M_1(x) = alpha\nClustering at x=00: M_2(x) =  fracalpha(1 + 15x)^2\nClustering at x=1: M_3(x) =  fracalpha(1 + 15(1-x))^2\nClustering at x=05: M_4(x) = alpha textexpleft( frac-(x - 05)^2etaright)\nClustering at the edges: M_5(x) = M_2(x) + M_3(x) ","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"where alpha and beta are parameters.","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"Here are the results for the numerical approach with alpha = 40000 and beta = 005. With the last two examples, we are already running into the solver not being able to handel the stiffness of the problem.","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html#Uniform","page":"First Order System","title":"Uniform","text":"","category":"section"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"(Image: Uniform)","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html#Clustering-Near-x0","page":"First Order System","title":"Clustering Near x=0","text":"","category":"section"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"(Image: x=0 clustering)","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html#Clustering-Near-x1","page":"First Order System","title":"Clustering Near x=1","text":"","category":"section"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"(Image: x=1 clustering)","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html#Clustering-Near-x0.5","page":"First Order System","title":"Clustering Near x=05","text":"","category":"section"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"(Image: x=0.5 clustering)","category":"page"},{"location":"pages/NumericalMethods/FirstOrderSystem.html#Clustering-Near-Edges","page":"First Order System","title":"Clustering Near Edges","text":"","category":"section"},{"location":"pages/NumericalMethods/FirstOrderSystem.html","page":"First Order System","title":"First Order System","text":"(Image: edge clustering)","category":"page"},{"location":"pages/2Dto1D/MetricReformulation.html#Metric-Reformulation","page":"Metric Reformulation","title":"Metric Reformulation","text":"","category":"section"},{"location":"pages/2Dto1D/MetricReformulation.html#2D-to-1D-Mapping","page":"Metric Reformulation","title":"2D to 1D Mapping","text":"","category":"section"},{"location":"pages/2Dto1D/MetricReformulation.html#Local-Mapping","page":"Metric Reformulation","title":"Local Mapping","text":"","category":"section"},{"location":"pages/2Dto1D/MetricReformulation.html","page":"Metric Reformulation","title":"Metric Reformulation","text":"Suppose we wish to solve the grid spacing along a discrete boundary Gamma given by the points gamma_i in R^2 for i=12dots n where n is the total number of points along the boundary. In-between each point is a linear interpolation Gamma_i for i=12dotsn-1 which defines the piecewise-continuous boundary. ","category":"page"},{"location":"pages/2Dto1D/MetricReformulation.html","page":"Metric Reformulation","title":"Metric Reformulation","text":"To find the grid spacing according to the 2D metric tensor M, let's compute a new m value to represent the desired metric stretching in R rather than R^2. Let's define m_i as","category":"page"},{"location":"pages/2Dto1D/MetricReformulation.html","page":"Metric Reformulation","title":"Metric Reformulation","text":"m_i = frac1gamma_i+1 - gamma_i-1^2(gamma_i+1 - gamma_i-1)^top cdot  beginpmatrix M_11  M_12  M_21  M_22 endpmatrix_i cdot (gamma_i+1 - gamma_i-1) quad i=2cdots n - 1","category":"page"},{"location":"pages/2Dto1D/MetricReformulation.html","page":"Metric Reformulation","title":"Metric Reformulation","text":"and one sided differences for the edges","category":"page"},{"location":"pages/2Dto1D/MetricReformulation.html","page":"Metric Reformulation","title":"Metric Reformulation","text":"m_1 = frac1gamma_2 - gamma_1^2(gamma_2 - gamma_1)^top  cdot beginpmatrix M_11  M_12  M_21  M_22 endpmatrix_1 cdot (gamma_2 - gamma_1)","category":"page"},{"location":"pages/2Dto1D/MetricReformulation.html","page":"Metric Reformulation","title":"Metric Reformulation","text":"m_n = frac1gamma_n - gamma_n-1^2(gamma_n - gamma_n-1)^top cdot beginpmatrix M_11  M_12  M_21  M_22 endpmatrix_n cdot (gamma_n - gamma_n-1)","category":"page"},{"location":"pages/2Dto1D/MetricReformulation.html","page":"Metric Reformulation","title":"Metric Reformulation","text":"This is basically a local normalized product between a central difference on x_i and the local M_i tensor. Let's call this method \"local.\"","category":"page"},{"location":"pages/2Dto1D/MetricReformulation.html#Note","page":"Metric Reformulation","title":"Note","text":"","category":"section"},{"location":"pages/2Dto1D/MetricReformulation.html","page":"Metric Reformulation","title":"Metric Reformulation","text":"Using the nuclear norm might by bad because it would change the metric value.","category":"page"},{"location":"pages/2Dto1D/MetricReformulation.html#Algorithm","page":"Metric Reformulation","title":"Algorithm","text":"","category":"section"},{"location":"pages/2Dto1D/MetricReformulation.html","page":"Metric Reformulation","title":"Metric Reformulation","text":"We can compute the metric value m_i using the following ","category":"page"},{"location":"pages/2Dto1D/MetricReformulation.html","page":"Metric Reformulation","title":"Metric Reformulation","text":"function Get1DMetric(points, getMetric; method = \"local\")\n    function norm(v)\n        return sqrt(v[1]^2 + v[2]^2)\n    end\n\n    n = size(points, 2)\n    m = zeros(Float64, n)\n    diff = zeros(Float64, 2, n)\n\n    diff[:, 2:n-1] = (points[:, 3:n] - points[:, 1:n-2])     \n    diff[:, n] = (points[:, n] - points[:, n-1]) \n    diff[:,1] = points[:, 2] - points[:, 1] \n    \n    for i in 1:n\n        # get metric value for the points M\n        M = getMetric(points[1, i], points[2, i])\n\n        localDiff = diff[:, i]\n        normLocalDiff = norm(localDiff)\n        m[i] = localDiff' * M * localDiff / normLocalDiff^2\n        end\n    end\n\n    return m\nend","category":"page"},{"location":"pages/2Dto1D/MetricReformulation.html#Results","page":"Metric Reformulation","title":"Results","text":"","category":"section"},{"location":"pages/2Dto1D/MetricReformulation.html","page":"Metric Reformulation","title":"Metric Reformulation","text":"We look at three metric cases:","category":"page"},{"location":"pages/2Dto1D/MetricReformulation.html","page":"Metric Reformulation","title":"Metric Reformulation","text":"Uniform.\nClustering at x=00\nClustering at x=1","category":"page"},{"location":"pages/2Dto1D/MetricReformulation.html","page":"Metric Reformulation","title":"Metric Reformulation","text":"Let's refer to the real metric tensor as M(x(s)) and the computed 1D metric tensor as m(x(s)).","category":"page"},{"location":"pages/2Dto1D/MetricReformulation.html","page":"Metric Reformulation","title":"Metric Reformulation","text":"Extracted Boundary Gamma with discrete boundary points gamma_i, linear interpolates Gamma_i, and computed 1D metric values along it are shown in the following plot. Note that the direction of parametrization s is shown by the red arrow.","category":"page"},{"location":"pages/2Dto1D/MetricReformulation.html","page":"Metric Reformulation","title":"Metric Reformulation","text":"(Image: uniform-metricboundary) (Image: x=0-metricboundary) (Image: x=1-metricboundary)","category":"page"},{"location":"pages/2Dto1D/Mapping2Dto1D.html#Mapping-the-2-Dimensional-Problem-to-1-Dimension","page":"Mapping 2D to 1D","title":"Mapping the 2 Dimensional Problem to 1 Dimension","text":"","category":"section"},{"location":"pages/2Dto1D/Mapping2Dto1D.html","page":"Mapping 2D to 1D","title":"Mapping 2D to 1D","text":"Since we aim to construct grid in Omega subset R^2, we need a method to convert the 2D problem into a 1D problem. While we have the 1D equation","category":"page"},{"location":"pages/2Dto1D/Mapping2Dto1D.html","page":"Mapping 2D to 1D","title":"Mapping 2D to 1D","text":"beginalign*\n-8 sigma^4 M^2 x_s^2  x_ss - 4 sigma^4 M M_x x_s^4  -  4  sigma^2 m M x_ss  -  2 sigma^2 m M_x x_s^2  = 0\nendalign*","category":"page"},{"location":"pages/2Dto1D/Mapping2Dto1D.html","page":"Mapping 2D to 1D","title":"Mapping 2D to 1D","text":"we need to reduce the dimension of x in R^2 and M in R^2 times 2. This will consistent of four steps:","category":"page"},{"location":"pages/2Dto1D/Mapping2Dto1D.html","page":"Mapping 2D to 1D","title":"Mapping 2D to 1D","text":"Convert the 2D metric to 1D\nConvert the 2D curve to 1D\nNumerically solve the Spacing ODE\nConvert 1D distribution of points back to curve","category":"page"},{"location":"pages/2Dto1D/Mapping2Dto1D.html#Results","page":"Mapping 2D to 1D","title":"Results","text":"","category":"section"},{"location":"pages/2Dto1D/Mapping2Dto1D.html","page":"Mapping 2D to 1D","title":"Mapping 2D to 1D","text":"We look at three metric cases:","category":"page"},{"location":"pages/2Dto1D/Mapping2Dto1D.html","page":"Mapping 2D to 1D","title":"Mapping 2D to 1D","text":"Uniform.\nClustering at x=00\nClustering at x=1","category":"page"},{"location":"pages/2Dto1D/PointProjection.html#Projecting-Points","page":"Projecting Points","title":"Projecting Points","text":"","category":"section"},{"location":"pages/2Dto1D/PointProjection.html#2D-to-1D-Projection","page":"Projecting Points","title":"2D to 1D Projection","text":"","category":"section"},{"location":"pages/2Dto1D/PointProjection.html","page":"Projecting Points","title":"Projecting Points","text":"Suppose we wish to solve the grid spacing along a discrete boundary Gamma given by the points gamma_i in R^2 for i=12dots n where n is the total number of points along the boundary. In-between each point is a linear interpolation Gamma_i for i=12dotsn-1 which defines the piecewise-continuous boundary Gamma. That is","category":"page"},{"location":"pages/2Dto1D/PointProjection.html","page":"Projecting Points","title":"Projecting Points","text":"Gamma(x) = begincases Gamma_i(eta_i(x)) textif  x in gamma_i gamma_i+1  0 textotherwise endcases","category":"page"},{"location":"pages/2Dto1D/PointProjection.html","page":"Projecting Points","title":"Projecting Points","text":"where","category":"page"},{"location":"pages/2Dto1D/PointProjection.html","page":"Projecting Points","title":"Projecting Points","text":"Gamma_i(eta) = eta gamma_i+1 + (1 - eta) gamma_i quad eta in 01","category":"page"},{"location":"pages/2Dto1D/PointProjection.html","page":"Projecting Points","title":"Projecting Points","text":"Here eta_i(x) would be a parameterization between gamma_i and gamma_i+1. That is ","category":"page"},{"location":"pages/2Dto1D/PointProjection.html","page":"Projecting Points","title":"Projecting Points","text":"eta_i(x) = fracx - gamma_igamma_i+1 - gamma_i","category":"page"},{"location":"pages/2Dto1D/PointProjection.html","page":"Projecting Points","title":"Projecting Points","text":"Okay writing this out mathematically is a pain, let's just explain the algorithm.","category":"page"},{"location":"pages/2Dto1D/PointProjection.html#Algorithm","page":"Projecting Points","title":"Algorithm","text":"","category":"section"},{"location":"pages/2Dto1D/PointProjection.html","page":"Projecting Points","title":"Projecting Points","text":"Given gamma_i in R^2, find a 1D representation s in R. We want to do this in such a way that we can find an invertible mapping f R^2 to R. Now with f(Gamma_i) in R and m in R, we can solve the spacing ODE to get the optimal distribution xi_i. Finally we can project the points back onto the Gamma_i to get the optimal distribution on the boundary using f^-1.","category":"page"},{"location":"pages/2Dto1D/PointProjection.html#Basic-Method-in-Words","page":"Projecting Points","title":"Basic Method in Words","text":"","category":"section"},{"location":"pages/2Dto1D/PointProjection.html#Step-1-2D-to-1D","page":"Projecting Points","title":"Step 1 - 2D to 1D","text":"","category":"section"},{"location":"pages/2Dto1D/PointProjection.html","page":"Projecting Points","title":"Projecting Points","text":"Given points  gamma_i _i=1^n we can  f(gamma_i) _i=1^n by ","category":"page"},{"location":"pages/2Dto1D/PointProjection.html","page":"Projecting Points","title":"Projecting Points","text":"Computing the local spacing in array diff,\nAccumulate the spacing sp = cumsum(diff),\nAdd zero back in xi = [0, sp],\nNormalize xs = xi / xi[end].","category":"page"},{"location":"pages/2Dto1D/PointProjection.html","page":"Projecting Points","title":"Projecting Points","text":"Now  textxs _i=1^n is within 01 with normalized spacing according to the original boundary spacing. Algorithmically:","category":"page"},{"location":"pages/2Dto1D/PointProjection.html","page":"Projecting Points","title":"Projecting Points","text":"function Boundary2Dto1D(boundary)\n    # boundarySection is 2×N (rows: x,y; columns: points in order)\n    x = boundary[1, :]\n    y = boundary[2, :]\n\n    # segment lengths (N-1)\n    Δx = diff(x)\n    Δy = diff(y)\n    Δs = sqrt.(Δx.^2 .+ Δy.^2)\n\n    xs = [0.0; cumsum(Δs)]   # length N, xs[1]=0, xs[end]=arclength\n\n    # normalize \n    xs = xs ./ xs[end]  # now xs is in [0, 1]\n    return xs\nend","category":"page"},{"location":"pages/2Dto1D/PointProjection.html#Step-2-Spacing","page":"Projecting Points","title":"Step 2 - Spacing","text":"","category":"section"},{"location":"pages/2Dto1D/PointProjection.html","page":"Projecting Points","title":"Projecting Points","text":"Now we get the optimal spacing","category":"page"},{"location":"pages/2Dto1D/PointProjection.html","page":"Projecting Points","title":"Projecting Points","text":"Compute non-optimal solution sol = GridGeneration.SolveODE(M, Mx, N, xs[1], xs[end])\nCompute optimal spacing N_opt = ceil(Int, 1 / GridGeneration.ComputeOptimalSpacing(sol[1, :], M, xs))\nCompute optimal solution sol_opt = GridGeneration.SolveODE(M, Mx, N_opt, xs[1], xs[end])  ","category":"page"},{"location":"pages/2Dto1D/PointProjection.html","page":"Projecting Points","title":"Projecting Points","text":"function GetOptimalSolution(m, mx, N, xs; method = \"system of odes\")\n    m_func = GridGeneration.build_interps_linear(xs, m)\n    mx_func = GridGeneration.build_interps_linear(xs, mx)\n\n    if method == \"system of odes\"\n        sol = GridGeneration.SolveODE(m_func, mx_func, N, xs[1], xs[end])\n        N_opt = GridGeneration.ComputeOptimalNumberofPoints(sol[1, :], m, xs)\n        @info(\"Optimal number of points: \", N_opt)\n        sol_opt = GridGeneration.SolveODE(m_func, mx_func, N_opt, xs[1], xs[end])\n    end\n\n    return sol_opt, sol\nend","category":"page"},{"location":"pages/2Dto1D/PointProjection.html#Step-3-1D-to-2D","page":"Projecting Points","title":"Step 3 - 1D to 2D","text":"","category":"section"},{"location":"pages/2Dto1D/PointProjection.html","page":"Projecting Points","title":"Projecting Points","text":"And finally let's project the points back onto the boundary","category":"page"},{"location":"pages/2Dto1D/PointProjection.html","page":"Projecting Points","title":"Projecting Points","text":"Extract solution x_sol = sol_opt[1,:]\nFor each x in x_sol\ndetermine i such that x in textxs_i textxs_i+1\ncompute eta = fracx - textxs_itextxs_i+1 - textxs_i\nInterpolate x onto Gamma_i according to eta","category":"page"},{"location":"pages/ODE/ODEFormulation.html#Ordinary-Differential-Equation-for-Metric-Conforming-Structured-Grid-Generator","page":"ODE Formulation","title":"Ordinary Differential Equation for Metric-Conforming Structured Grid Generator","text":"","category":"section"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"The aim is to create a simple metric-conforming structured grid generator by dividing the entire domain Omega into sub-domains hatOmega_i known as blocks. Along the sides of the blocks, we solve a 1D grid-spacing problem through the calculus of variation whose solution gives a coordinate mapping for the distribution of points according to the metric tensor. An algebraic method known as Transfinite Interpolation is used to fill in each block by interpolating the distribution of points along the edges into 2D. Supporting mathematical steps are shown in the Appendix.","category":"page"},{"location":"pages/ODE/ODEFormulation.html#General-Grid-Spacing-Problem","page":"ODE Formulation","title":"General Grid-Spacing Problem","text":"","category":"section"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"We define the metric","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"m_alpha(x_s x s) = sigma_alpha^2  M x_s^2 - 1","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"where M(x(s)) is the metric tensor field designed from the residual posterior estimate, x is the physical domain and s is the computational domain. We will use variable subscripts to notation derivatives left( x_s = fracdxds right). Next, we define our loss as ","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"L_textmisfit(x_s x s) = m_alpha^2","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"which we use to define the functional  ","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"mathcalLx(s) = int_Omega L(x(s) x_s(s) s) d s","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"From variations we know the general solution is the Euler-Lagrange equation","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"fracpartial Lpartial x- fracdd s fracpartial Lpartial x_s = 0","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"For this choice of kernel L_textmisfit, the solution in R^n is a second-order nonlinear PDE of the form","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"-sum_alpha=1^n 8 sigma_alpha^4 M_klfracpartial x_lpartial s_alpha M_ij fracpartial x_ipartial s_alpha fracpartial^2 x_jpartial s_alpha^2 - sum_alpha = 1^n 4 sigma_alpha^4 M_kl fracpartial x_lpartial s_alphafracpartial M_ijpartial x_p fracpartial x_ppartial s_alpha fracpartial x_ipartial s_alpha fracpartial x_jpartial s_alpha - sum_alpha=1^n m_alpha sigma_alpha^2left( 4 M_kj fracpartial^2 x_jpartial s_alpha^2 + 4 fracpartial M_kjpartial x_pfracpartial x_ppartial x_s fracpartial x_jpartial s_alpha  - 2 fracpartial M_ijpartial x_kfracpartial x_ipartial s_alpha  fracpartial x_jpartial s_alpha right) = 0 k in 1 2 dots n","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"where Einstein Notation is used for non-Greek subscripts. ","category":"page"},{"location":"pages/ODE/ODEFormulation.html#1D-Grid-Spacing","page":"ODE Formulation","title":"1D Grid-Spacing","text":"","category":"section"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"In R, the above PDE turns into a friendly nonlinear ODE.","category":"page"},{"location":"pages/ODE/ODEFormulation.html#Second-Order-ODE","page":"ODE Formulation","title":"Second Order ODE","text":"","category":"section"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"Simplifying the above equation with n=1 yields a second-order nonlinear ODE of the form ","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"boxed 8 sigma^4  M^2 x_s^2 x_ss  + 4 sigma^4  M M_x x_s^4 + 4sigma^2 m M x_ss + 2 sigma^2 m M_x x_s^2  = 0 ","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"with dirichlet boundary conditions","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"x(0) = x_0 quad x(1) = x_1","category":"page"},{"location":"pages/ODE/ODEFormulation.html#First-Order-System-of-ODEs","page":"ODE Formulation","title":"First Order System of ODEs","text":"","category":"section"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"We can rewrite the second order ODE as a system of first order ODEs by letting u_1 = x and u_2 = x_s to find","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"begincases \nu_1 = u_2 = x\nu_2 = x = - frac12 fracM_xMx_s^2\nendcases","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"with dirichlet boundary conditions:","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"u_1(1) = x_1 u_1(0) = x_0 u_2(0) = u_2(1) = 0","category":"page"},{"location":"pages/ODE/ODEFormulation.html#Optimal-Grid-Spacing","page":"ODE Formulation","title":"Optimal Grid Spacing","text":"","category":"section"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"We also require that ","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"fracpartial Lpartial sigma = 0","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"which gives us the condition","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"boxedsigma = left( fracint_hatOmega M x^2 dsint_hatOmega (M x^2)^2 ds right)^12","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"where sigma = frac1n_textopt. ","category":"page"},{"location":"pages/ODE/ODEFormulation.html","page":"ODE Formulation","title":"ODE Formulation","text":"We aim to solve the boxed equation numerically to find the distribution of points along the boundary of the blocks.","category":"page"},{"location":"index.html#GridGeneration.jl-Documentation","page":"Home","title":"GridGeneration.jl Documentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Welcome to the documentation for GridGeneration.jl","category":"page"},{"location":"index.html#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Brief description of your package.","category":"page"},{"location":"pages/ODE/MathematicalWork.html#Mathematical-Work","page":"Mathematical Work","title":"Mathematical Work","text":"","category":"section"},{"location":"pages/ODE/MathematicalWork.html#PDE-Formulation","page":"Mathematical Work","title":"PDE Formulation","text":"","category":"section"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"We define the metric","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"m_alpha(x_s x s) = sigma_alpha^2  M x_s^2 - 1","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"where M(x(s)) is the metric tensor field designed from the residual posterior estimate, x is the physical domain and s is the computational domain. We will use variable subscripts to notation derivatives left( x_s = fracdxds right). Next, we define our loss as ","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"L_textmisfit(x_s x s) = m_alpha^2","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"which we use to define the functional  ","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"mathcalLx(s) = int_Omega L(x(s) x_s(s) s) d s","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"From variations we know the general solution is the Euler-Lagrange equation","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"fracpartial Lpartial x- fracdd s fracpartial Lpartial x_s = 0","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"For this choice of kernel L_textmisfit, the solution in R^n is a second-order nonlinear PDE of the form","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"-sum_alpha=1^n 8 sigma_alpha^4 M_klfracpartial x_lpartial s_alpha M_ij fracpartial x_ipartial s_alpha fracpartial^2 x_jpartial s_alpha^2 - sum_alpha = 1^n 4 sigma_alpha^4 M_kl fracpartial x_lpartial s_alphafracpartial M_ijpartial x_p fracpartial x_ppartial s_alpha fracpartial x_ipartial s_alpha fracpartial x_jpartial s_alpha - sum_alpha=1^n m_alpha sigma_alpha^2left( 4 M_kj fracpartial^2 x_jpartial s_alpha^2 + 4 fracpartial M_kjpartial x_pfracpartial x_ppartial x_s fracpartial x_jpartial s_alpha  - 2 fracpartial M_ijpartial x_kfracpartial x_ipartial s_alpha  fracpartial x_jpartial s_alpha right) = 0 k in 1 2 dots n","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"where Einstein Notation is used for non-Greek subscripts. ","category":"page"},{"location":"pages/ODE/MathematicalWork.html#ODE-Formulation","page":"Mathematical Work","title":"ODE Formulation","text":"","category":"section"},{"location":"pages/ODE/MathematicalWork.html#Second-Order-Nonlinear-ODE","page":"Mathematical Work","title":"Second Order Nonlinear ODE","text":"","category":"section"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"In one dimension, we can clean up the above equation notably by removing all the summations and indices:","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"beginalign*\n-8 sigma^4 Mfracpartial xpartial s M fracpartial xpartial s fracpartial^2 xpartial s^2 - 4 sigma^4 M fracpartial xpartial sfracpartial Mpartial x fracpartial xpartial sfracpartial xpartial s fracpartial xpartial s -  m sigma^2left( 4 Mfracpartial^2 xpartial s^2 + 4 fracpartial Mpartial xfracpartial xpartial sfracpartial xpartial s  - 2 fracpartial Mpartial xfracpartial xpartial s  fracpartial xpartial s right) = 0\nendalign*","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"Let's combine like terms, fully expand, and introduce the subscript notation for partial derivatives","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"beginalign*\n-8 sigma^4 M^2 x_s^2  x_ss - 4 sigma^4 M M_x x_s^4  -  4  sigma^2 m M x_ss  -  2 sigma^2 m M_x x_s^2  = 0\nendalign*","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"which is our second order nonlinear ODE.","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"Working towards a first order system, let's simplify by dividing both sides by -2 sigma^2 to get","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"beginalign*\n4 sigma^2 M^2 x_s^2  x_ss + 2 sigma^2 M M_x x_s^4  +  2  m M x_ss  +  m M_x x_s^2  = 0\nendalign*","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"Now let's solve for x_ss to find","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"beginalign*\nleft( 4 sigma^2 M^2 x_s^2 + 2 m M right) x_ss + 2 sigma^2 M M_x x_s^4 +  m M_x x_s^2  = 0 iff x_ss = - frac2 sigma^2 M M_x x_s^4 +  m M_x x_s^24 sigma^2 M^2 x_s^2 + 2 m M\nendalign*","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"Further simplifying we arrive at","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"beginalign*\nx_ss = - frac M_x x_s^2 left( 2sigma^2 M x_s^2 +  m right)2M left( 2sigma^2 M x_s^2 + mright) = - frac M_x x_s^22M\nendalign*","category":"page"},{"location":"pages/ODE/MathematicalWork.html#First-Order-System","page":"Mathematical Work","title":"First Order System","text":"","category":"section"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"To turn the above into a first order system, let u_1 = x and u_2 = x_s, then","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"begincases \nu_1 = u_2 = x\nu_2 = x = - frac12 fracM_xM x_s^2\nendcases","category":"page"},{"location":"pages/ODE/MathematicalWork.html#Semi-Analytic-Solution","page":"Mathematical Work","title":"Semi-Analytic Solution","text":"","category":"section"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"We can continue to simplify by letting u = x_s, then we arrive at","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"beginalign*\nx_ss = - frac M_x x_s^22M implies u = - frac12 fracM_xM u\nendalign*","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"If we assume that x_s neq 0, we can divide both sides by u and integrate to find that","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"ln(p) = - frac12 ln(M) iff p = x_s = fracC_1sqrtM(x)","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"where C_1 comes from the constant of integration. ","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"We have an initial value boundary value problem (IVBP ODE), so let's prescribe boundary conditions at x(s=0) = 0 and x(s=1) = L such that our computational domain is s in 01 and the physical domain is x in 0L subset R.","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"Next, let's separate variables to get","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"fracdxds = fracC_1sqrtM(x) rightarrow sqrtM(x) dx = C_1 ds","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"Integrating both sides from s=0 to s, ","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"int_x(0)^x(s) sqrtM(xi) dxi = C_1 s","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"Finally let's enforce the boundary condition at x(1) = L to solve for C_1 and find that","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"C_1 = int_0^L sqrtM(xi) d xi = I","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"Therefore the final solution becomes","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"int_0^x(s) sqrtM(xi) dxi = I s","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"If we let I(x) = int_0^x sqrtM(xi) d xi, we can further clean up the express as","category":"page"},{"location":"pages/ODE/MathematicalWork.html","page":"Mathematical Work","title":"Mathematical Work","text":"I(x(s)) = s I(x(s=1))","category":"page"}]
}
